- hosts: localhost
  vars:
    # Name that libvirt will call this VM
    HOSTNAME: "{{ hostname }}"
    # FQDN that will be logged in dnsmasq
    FULL_HOSTNAME: "{{ full_hostname }}"
  vars_files:
    # Path to your settings file and your VM size file here
    - "{{ size }}"
    - "{{ settings }}"
  gather_facts: no
  become: yes
  tasks:
    - name: Generate a new cloud-init host directory for {{ HOSTNAME }}
      file:
        path: "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Generate a new meta-data file for {{ HOSTNAME }}
      file:
        path: "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}/meta-data"
        state: touch
        owner: root
        group: root
        mode: 0755

    - name: Add the new instance-id to "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}/meta-data"
      lineinfile:
        path: "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}/meta-data"
        line: "instance-id: {{ HOSTNAME }}"
        state: present

    - name: Add the new hostname to "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}/meta-data"
      lineinfile:
        path: "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}/meta-data"
        line: "local-hostname: {{ FULL_HOSTNAME }}"
        state: present
        insertafter: "^instance-id:"

    - name: Generate new cloud-init iso for "{{ HOSTNAME }}"
      command: genisoimage -output "{{ ISO_PATH }}/{{ HOSTNAME }}.iso" -joliet -volid cidata \
               -r "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}/meta-data" "{{ CLOUD_INIT_PATH }}/user-data/user-data"

    - name: Instantiate OS disk for {{ HOSTNAME }}
      copy:
        src: "{{ OS_IMAGE_PATH }}/{{ OS_IMAGE }}"
        dest: "{{ OS_DISK_PATH }}/{{ HOSTNAME }}.qcow2"
        mode: 0644
        owner: root
        group: root
    - name: Instantiate the data disk for {{ HOSTNAME }}
      shell: qemu-img create -f qcow2 -o {{ QEMU_OPTS }} {{ OS_DISK_PATH }}/{{ HOSTNAME }}-data.qcow2 {{ DATA_DISK_SIZE }}
      when: DATA_DISK == True

    - name: Import {{ HOSTNAME }} VM
      command: virt-install \
                  --name {{ HOSTNAME }} \
                  --vcpus {{ VCPUS }} \
                  --memory {{ MEMORY }} \
                  --import \
                  --disk "{{ OS_DISK_PATH }}/{{ HOSTNAME }}.qcow2",format=qcow2,bus=virtio \
                  --disk "{{ ISO_PATH }}/{{ HOSTNAME }}.iso",device=cdrom
                  --network network={{ NETWORK }}
                  --os-type=linux
                  --os-variant=rhel7
                  --noautoconsole

### We don't want to detach the ISO until the VM has fully finished booting
    - name: Wait for SSH to become available on VM
      wait_for:
        timeout: 120
        host: "{{ HOSTNAME }}"
        port: 22
        delay: 10

    - name: Stop cloud-init from ever starting again
      command: ansible "{{ HOSTNAME }}" -i "{{ HOSTNAME }}", -m systemd -a "name=cloud-init state=stopped enabled=False masked=True" --become
      become: no

    - name: Remove the cloud-init iso
      file:
        path: "{{ ISO_PATH }}/{{ HOSTNAME }}.iso"
        state: absent

    - name: Remove the "{{ HOSTNAME }}/meta-data"
      file:
        path: "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}/meta-data"
        state: absent

    - name: Remove the "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}" directory
      file:
        path: "{{ CLOUD_INIT_PATH }}/meta-data/{{ HOSTNAME }}"
        state: absent

    - name: shutdown {{ HOSTNAME }}
      command: virsh shutdown {{ HOSTNAME }}

    - name: Wait 5 seconds for VM to shutdown
      wait_for:
        timeout: 5

    - name: Remove the CD-ROM from {{ HOSTNAME }}
      command: virsh detach-disk {{ HOSTNAME }} hda --config

    - name: Attach the data disk
      command: virsh attach-disk {{ HOSTNAME }} {{ OS_DISK_PATH }}/{{ HOSTNAME }}-data.qcow2 vdb --persistent
      when: DATA_DISK == True

    - name: Start the VM back up
      command: virsh start {{ HOSTNAME }}

    - name: Wait for SSH to become available
      wait_for:
        port: 22
        state: present
        timeout: 120
        delay: 10
